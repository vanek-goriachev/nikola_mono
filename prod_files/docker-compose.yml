version: '3'

services:
  redis:
    profiles:
      - core
    image: library/redis
    container_name: redis
    restart: unless-stopped
    ports:
      - '${REDIS_PORT}:6379'
    networks:
      - nikola-docker-network
    volumes:
      - type: volume
        source: redis_data
        target: /data

  backend:
    profiles:
      - core
    image: cr.yandex/crpll06klmdrn2f8jpuj/backend:${BACKEND_IMAGE_TAG}
    container_name: backend
    ports:
      - '${BACKEND_PORT}:8000'
    env_file:
      - ./.env
    networks:
      - nikola-docker-network
    volumes:
      - type: volume
        source: backend_media
        target: /app/media
      - type: volume
        source: backend_static
        target: /app/static
    depends_on:
      - redis
    entrypoint: ./backend_entrypoint.sh

  celery-workers:
    profiles:
      - core
    image: cr.yandex/crpll06klmdrn2f8jpuj/backend:${BACKEND_IMAGE_TAG}
    container_name: celery-workers
    env_file:
      - ./.env
    networks:
      - nikola-docker-network
    volumes:
      - type: volume
        source: backend_media
        target: /app/media
      - type: volume
        source: backend_static
        target: /app/static
    depends_on:
      - redis
      - backend
    entrypoint: ./celery_entrypoint.sh

  flower:
    profiles:
      - core
    image: cr.yandex/crpll06klmdrn2f8jpuj/backend:${BACKEND_IMAGE_TAG}
    container_name: flower
    ports:
      - '${FLOWER_PORT}:5555'
    env_file:
      - ./.env
    networks:
      - nikola-docker-network
    volumes:
      - type: volume
        source: backend_media
        target: /app/media
      - type: volume
        source: backend_static
        target: /app/static
    depends_on:
      - redis
      - backend
      - celery-workers
    entrypoint: ./flower_entrypoint.sh

  frontend:
    profiles:
      - core
    image: cr.yandex/crpll06klmdrn2f8jpuj/frontend:${FRONTEND_IMAGE_TAG}
    container_name: frontend
    env_file:
      - ./.env
    ports:
      - "3000:3000"
    networks:
      - nikola-docker-network
    volumes:
      - type: volume
        source: app_next
        target: /app/.next

  nginx:
    profiles:
      - nginx
    image: nginx
    container_name: nginx
    env_file:
      - ./.env
    ports:
      - "80:80"
      - "443:443"
    networks:
      - nikola-docker-network
    volumes:
      - type: bind
        source: ./nginx.conf
        target: /etc/nginx/conf.d/nginx.conf
      - type: bind
        source: ./options-ssl-nginx.conf
        target: /etc/nginx/conf.d/options-ssl-nginx.conf
      - type: volume
        source: app_next
        target: /frontend_next
      - type: volume
        source: backend_media
        target: /backend_media
      - type: volume
        source: backend_static
        target: /backend_static
      - type: volume
        source: letsencrypt_volume
        target: /letsencrypt_volume
      - type: volume
        source: certbot_challenge_files
        target: /certbot_challenge_files

  nginx-temporary:
    profiles:
      - nginx-certbot
      - nginx-temporary
    image: nginx
    container_name: nginx-temporary
    ports:
      - "80:80"
    volumes:
      - type: bind
        source: ./nginx-certbot.conf
        target: /etc/nginx/conf.d/nginx-certbot.conf
      - type: volume
        source: letsencrypt_volume
        target: /letsencrypt_volume
      - type: volume
        source: certbot_challenge_files
        target: /certbot_challenge_files

  certbot:
    profiles:
      - nginx-certbot
      - certbot
    image: certbot/certbot
    container_name: certbot
    volumes:
      - type: volume
        source: letsencrypt_volume
        target: /etc/letsencrypt
      - type: volume
        source: certbot_challenge_files
        target: /var/www/html
      - type: bind
        source: ./certbot_entrypoint.sh
        target: /app/certbot_entrypoint.sh
    entrypoint: sh -c 'chmod +x /app/certbot_entrypoint.sh; sh /app/certbot_entrypoint.sh'

volumes:
  redis_data:
  app_next:
  backend_media:
  backend_static:
  letsencrypt_volume:
  certbot_challenge_files:

networks:
  nikola-docker-network:
    external: false
